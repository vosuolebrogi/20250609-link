import os
import re
import logging
from datetime import datetime
from urllib.parse import quote, urlparse, parse_qs, unquote
from typing import Dict, Any

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class LinkBuilder(StatesGroup):
    waiting_for_campaign = State()
    waiting_for_action_type = State()
    waiting_for_service = State()
    waiting_for_route_start = State()
    waiting_for_route_end = State()
    waiting_for_custom_deeplink = State()
    waiting_for_desktop_url = State()


def transliterate_to_latin(text: str) -> str:
    """–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤"""
    cyrillic_to_latin = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
    }
    
    result = ""
    for char in text.lower():
        if char in cyrillic_to_latin:
            result += cyrillic_to_latin[char]
        elif char.isalnum():
            result += char
        # –°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    
    return result


def is_valid_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL"""
    try:
        result = urlparse(url)
        return all([result.scheme, result.netloc])
    except:
        return False


def build_final_link(user_data: Dict[str, Any]) -> str:
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    # –ë–∞–∑–æ–≤–∞—è —á–∞—Å—Ç—å —Å—Å—ã–ª–∫–∏
    base_url = "https://yandex.go.link/"
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏–ø–ª–∏–Ω–∫
    deeplink = user_data.get('deeplink', '')
    if deeplink.startswith('yandextaxi://'):
        deeplink = deeplink[13:]  # –£–±–∏—Ä–∞–µ–º yandextaxi://
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    today = datetime.now().strftime('%Y%m%d')
    params = {
        'adj_t': '1md8ai4n_1mztz3nz',
        'adj_campaign': f'{today}_bot',
        'adj_adgroup': transliterate_to_latin(user_data.get('campaign_name', ''))
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º fallback –µ—Å–ª–∏ –µ—Å—Ç—å
    if user_data.get('desktop_url'):
        params['adj_fallback'] = quote(user_data['desktop_url'])
    
    # –°—Ç—Ä–æ–∏–º URL
    param_string = '&'.join([f'{k}={v}' for k, v in params.items()])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å - ? –µ—Å–ª–∏ –≤ deeplink –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, & –µ—Å–ª–∏ –µ—Å—Ç—å
    separator = '&' if '?' in deeplink else '?'
    final_url = f"{base_url}{deeplink}{separator}{param_string}"
    
    return final_url


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "üöó –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ø–Ω–¥–µ–∫—Å Go.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞, –æ–ø–∏—à–∏ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –¥–µ–ª–∞–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞:"
    )
    await LinkBuilder.waiting_for_campaign.set()


@dp.message_handler(state=LinkBuilder.waiting_for_campaign)
async def process_campaign(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏"""
    campaign_name = message.text.strip()
    
    if not campaign_name or len(campaign_name.split()) > 1:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º:")
        return
    
    await state.update_data(campaign_name=campaign_name)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(KeyboardButton("–ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"))
    keyboard.add(KeyboardButton("–î–∏–ø–ª–∏–Ω–∫ —Å–µ—Ä–≤–∏—Å–∞"))
    keyboard.add(KeyboardButton("–î–∏–ø–ª–∏–Ω–∫ –º–∞—Ä—à—Ä—É—Ç–∞"))
    keyboard.add(KeyboardButton("–°–≤–æ–π –¥–∏–ø–ª–∏–Ω–∫"))
    
    await message.answer(
        "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å—Å—ã–ª–∫—É:",
        reply_markup=keyboard
    )
    await LinkBuilder.waiting_for_action_type.set()


@dp.message_handler(state=LinkBuilder.waiting_for_action_type)
async def process_action_type(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    action = message.text.strip()
    
    if action == "–ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ":
        await state.update_data(deeplink="yandextaxi://")
        await ask_desktop_url(message, state)
        
    elif action == "–î–∏–ø–ª–∏–Ω–∫ —Å–µ—Ä–≤–∏—Å–∞":
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(KeyboardButton("–ï–¥–∞"))
        keyboard.add(KeyboardButton("–õ–∞–≤–∫–∞"))
        keyboard.add(KeyboardButton("–î—Ä–∞–π–≤"))
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–∏—Å:",
            reply_markup=keyboard
        )
        await LinkBuilder.waiting_for_service.set()
        
    elif action == "–î–∏–ø–ª–∏–Ω–∫ –º–∞—Ä—à—Ä—É—Ç–∞":
        await message.answer(
            "üö© –í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω):",
            reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
        )
        await LinkBuilder.waiting_for_route_start.set()
        
    elif action == "–°–≤–æ–π –¥–∏–ø–ª–∏–Ω–∫":
        await message.answer(
            "üîó –í–≤–µ–¥–∏ —Å–≤–æ–π –¥–∏–ø–ª–∏–Ω–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ yandextaxi://mydeeplink:",
            reply_markup=ReplyKeyboardRemove()
        )
        await LinkBuilder.waiting_for_custom_deeplink.set()
        
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")


@dp.message_handler(state=LinkBuilder.waiting_for_service)
async def process_service(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞"""
    service_map = {
        "–ï–¥–∞": "eats",
        "–õ–∞–≤–∫–∞": "grocery", 
        "–î—Ä–∞–π–≤": "drive"
    }
    
    service_name = message.text.strip()
    if service_name not in service_map:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.")
        return
    
    service_code = service_map[service_name]
    deeplink = f"yandextaxi://external?service={service_code}"
    await state.update_data(deeplink=deeplink)
    
    await ask_desktop_url(message, state)


@dp.message_handler(state=LinkBuilder.waiting_for_route_start)
async def process_route_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    start_address = message.text.strip()
    
    if start_address.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        start_address = ""
    
    await state.update_data(start_address=start_address)
    
    await message.answer(
        "üéØ –í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω):",
        reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
    )
    await LinkBuilder.waiting_for_route_end.set()


@dp.message_handler(state=LinkBuilder.waiting_for_route_end)
async def process_route_end(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    end_address = message.text.strip()
    
    if end_address.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        end_address = ""
    
    user_data = await state.get_data()
    start_address = user_data.get('start_address', '')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–ø–ª–∏–Ω–∫ –º–∞—Ä—à—Ä—É—Ç–∞
    params = []
    if start_address:
        params.append(f"start={quote(start_address)}")
    if end_address:
        params.append(f"end={quote(end_address)}")
    
    if params:
        deeplink = f"yandextaxi://route?{'&'.join(params)}"
    else:
        deeplink = "yandextaxi://route"
    
    await state.update_data(deeplink=deeplink)
    await ask_desktop_url(message, state)


@dp.message_handler(state=LinkBuilder.waiting_for_custom_deeplink)
async def process_custom_deeplink(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–∏–ø–ª–∏–Ω–∫–∞"""
    deeplink = message.text.strip()
    
    if not deeplink.startswith("yandextaxi://"):
        await message.answer("‚ùå –î–∏–ø–ª–∏–Ω–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'yandextaxi://'. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ href –∏ –µ–≥–æ URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
    if "href=" in deeplink:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ yandextaxi://
            deeplink_part = deeplink[13:]  # —É–±–∏—Ä–∞–µ–º yandextaxi://
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if "?" in deeplink_part:
                query_part = deeplink_part.split("?", 1)[1]
                params = parse_qs(query_part)
                
                if "href" in params:
                    href_value = params["href"][0]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ href URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
                    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –∑–Ω–∞—á–∏—Ç –æ–Ω–æ –±—ã–ª–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ
                    decoded_href = unquote(href_value)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω—ã
                    needs_encoding = any(char in href_value for char in ['%20', '%3A', '%2F', '%3F', '%26', '%3D'])
                    
                    if not needs_encoding and any(char in decoded_href for char in [' ', ':', '/', '?', '&', '=']):
                        await message.answer(
                            "‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä href –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω!\n"
                            f"–ù–∞–ø—Ä–∏–º–µ—Ä: –≤–º–µ—Å—Ç–æ '{decoded_href}' –∏—Å–ø–æ–ª—å–∑—É–π '{quote(decoded_href)}'\n\n"
                            "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:"
                        )
                        return
                        
        except Exception as e:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∏–ø–ª–∏–Ω–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
            return
    
    await state.update_data(deeplink=deeplink)
    await ask_desktop_url(message, state)


async def ask_desktop_url(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å URL –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞"""
    await message.answer(
        "üíª –í–≤–µ–¥–∏ URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å –¥–µ—Å–∫—Ç–æ–ø–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω:",
        reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
    )
    await LinkBuilder.waiting_for_desktop_url.set()


@dp.message_handler(state=LinkBuilder.waiting_for_desktop_url)
async def process_desktop_url(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞"""
    desktop_url = message.text.strip()
    
    if desktop_url.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        if not is_valid_url(desktop_url):
            await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://). –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
            return
        await state.update_data(desktop_url=desktop_url)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    user_data = await state.get_data()
    final_link = build_final_link(user_data)
    
    # –°–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
    encoded_link = quote(final_link)
    shortener_url = f"https://go-admin-frontend.taxi.yandex-team.ru/adjust?url={encoded_link}"
    
    await message.answer(
        f"üéâ –ì–æ—Ç–æ–≤–æ! –¢–≤–æ—è —Å—Å—ã–ª–∫–∞:\n\n"
        f"`{final_link}`\n\n"
        f"üìã –°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –≤—ã—à–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–π –≤ —Å–≤–æ–µ–π –∫–∞–º–ø–∞–Ω–∏–∏!\n\n"
        f"üì± –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ SMS –∏–ª–∏ QR-–∫–æ–¥–∞—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É:\n"
        f"[–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—é —Å—Å—ã–ª–∫–∏]({shortener_url})\n\n"
        f"–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É, –æ—Ç–ø—Ä–∞–≤—å /start",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode='Markdown'
    )
    
    await state.finish()


@dp.message_handler()
async def handle_other_messages(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å Go, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /start"
    )


if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    executor.start_polling(dp, skip_updates=True)